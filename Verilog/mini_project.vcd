$date
	Fri Oct 13 21:46:27 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mini_project_tb $end
$var wire 4 ! getParkingLot [0:3] $end
$var wire 4 " durationOfStay [0:3] $end
$var wire 8 # costOfStay [0:7] $end
$var wire 1 $ carry_brrow $end
$var reg 4 % entryTime1 [0:3] $end
$var reg 4 & entryTime2 [0:3] $end
$var reg 4 ' entryTime3 [0:3] $end
$var reg 1 ( incomingVehicle $end
$var reg 1 ) subtractor $end
$var reg 4 * timeElapsed [0:3] $end
$scope module multiplier $end
$var wire 1 + x9 $end
$var wire 1 , x8 $end
$var wire 1 - x7 $end
$var wire 1 . x6 $end
$var wire 1 / x5 $end
$var wire 1 0 x4 $end
$var wire 1 1 x3 $end
$var wire 1 2 x2 $end
$var wire 1 3 x17 $end
$var wire 1 4 x16 $end
$var wire 1 5 x15 $end
$var wire 1 6 x14 $end
$var wire 1 7 x13 $end
$var wire 1 8 x12 $end
$var wire 1 9 x11 $end
$var wire 1 : x10 $end
$var wire 1 ; x1 $end
$var wire 8 < product [7:0] $end
$var wire 4 = inp1 [3:0] $end
$var reg 4 > inp2 [3:0] $end
$scope module FA1 $end
$var wire 1 ? a $end
$var wire 1 @ b $end
$var wire 1 1 cout $end
$var wire 1 2 sout $end
$var wire 1 ; cin $end
$upscope $end
$scope module FA2 $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 1 cin $end
$var wire 1 / cout $end
$var wire 1 0 sout $end
$upscope $end
$scope module FA3 $end
$var wire 1 C b $end
$var wire 1 , cout $end
$var wire 1 + sout $end
$var wire 1 3 cin $end
$var wire 1 - a $end
$upscope $end
$scope module FA4 $end
$var wire 1 D b $end
$var wire 1 3 cout $end
$var wire 1 7 sout $end
$var wire 1 4 cin $end
$var wire 1 . a $end
$upscope $end
$scope module FA5 $end
$var wire 1 0 a $end
$var wire 1 E b $end
$var wire 1 4 cout $end
$var wire 1 6 sout $end
$var wire 1 5 cin $end
$upscope $end
$scope module FA6 $end
$var wire 1 , a $end
$var wire 1 F b $end
$var wire 1 G cout $end
$var wire 1 H sout $end
$var wire 1 : cin $end
$upscope $end
$scope module FA7 $end
$var wire 1 + a $end
$var wire 1 I b $end
$var wire 1 : cout $end
$var wire 1 J sout $end
$var wire 1 9 cin $end
$upscope $end
$scope module FA8 $end
$var wire 1 7 a $end
$var wire 1 K b $end
$var wire 1 9 cout $end
$var wire 1 L sout $end
$var wire 1 8 cin $end
$upscope $end
$scope module HA1 $end
$var wire 1 M a $end
$var wire 1 N b $end
$var wire 1 ; cout $end
$var wire 1 O sout $end
$upscope $end
$scope module HA2 $end
$var wire 1 P a $end
$var wire 1 / b $end
$var wire 1 - cout $end
$var wire 1 . sout $end
$upscope $end
$scope module HA3 $end
$var wire 1 2 a $end
$var wire 1 Q b $end
$var wire 1 5 cout $end
$var wire 1 R sout $end
$upscope $end
$scope module HA4 $end
$var wire 1 6 a $end
$var wire 1 S b $end
$var wire 1 8 cout $end
$var wire 1 T sout $end
$upscope $end
$upscope $end
$scope module pL $end
$var wire 4 U entryTime1 [0:3] $end
$var wire 4 V entryTime2 [0:3] $end
$var wire 4 W entryTime3 [0:3] $end
$var wire 1 ( incomingVehicle $end
$var wire 4 X getParkingLot [0:3] $end
$var reg 4 Y availableParkingLot [0:3] $end
$upscope $end
$scope module uut $end
$var wire 4 Z A [3:0] $end
$var wire 4 [ B [3:0] $end
$var wire 4 \ Bmod [3:0] $end
$var wire 1 ) subtractor $end
$var wire 4 ] sum_diff [3:0] $end
$var wire 1 $ carry_brrow $end
$scope module rca0 $end
$var wire 4 ^ a [3:0] $end
$var wire 4 _ b [3:0] $end
$var wire 1 ) cin $end
$var wire 4 ` sum [3:0] $end
$var wire 1 $ c4 $end
$var wire 1 a c3 $end
$var wire 1 b c2 $end
$var wire 1 c c1 $end
$scope module fa0 $end
$var wire 1 d a $end
$var wire 1 e b $end
$var wire 1 ) cin $end
$var wire 1 c cout $end
$var wire 1 f sout $end
$upscope $end
$scope module fa1 $end
$var wire 1 g a $end
$var wire 1 h b $end
$var wire 1 c cin $end
$var wire 1 b cout $end
$var wire 1 i sout $end
$upscope $end
$scope module fa2 $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 b cin $end
$var wire 1 a cout $end
$var wire 1 l sout $end
$upscope $end
$scope module fa3 $end
$var wire 1 m a $end
$var wire 1 n b $end
$var wire 1 a cin $end
$var wire 1 $ cout $end
$var wire 1 o sout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
xo
xn
0m
xl
xk
0j
xi
xh
0g
xf
xe
0d
xc
xb
xa
bx `
bx _
b0 ^
bx ]
bx \
bx [
b0 Z
b1111 Y
b1000 X
bx W
bx V
bx U
xT
0S
xR
0Q
0P
xO
xN
0M
xL
xK
0J
0I
0H
0G
0F
xE
0D
0C
0B
0A
0@
x?
b10 >
bx =
b0xxxx0 <
0;
0:
09
08
07
x6
05
04
03
x2
01
00
0/
0.
0-
0,
0+
b0 *
x)
x(
bx '
bx &
bx %
x$
b0xxxx0 #
bx "
b1000 !
$end
#2
1g
b10 %
b10 U
b10 [
1(
b10 *
b10 Z
b10 ^
#5
0L
0T
1R
06
0K
12
b110 #
b110 <
1O
1$
1N
0E
0o
1?
1a
1f
0l
b11 "
b11 =
b11 ]
b11 `
1i
0b
1c
1e
0h
1k
1n
b1101 \
b1101 _
0g
1j
1d
b100 !
b100 X
1)
b101 *
b101 Z
b101 ^
b111 Y
#2000
